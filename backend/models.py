"""
The models are designed according to the classic SQLAlchemy pattern
so that they can be used outside the application if needed
"""

from sqlalchemy.orm import relationship
from sqlalchemy import (
    Column,
    Integer,
    String,
    Float,
    Table,
    ForeignKey
)
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()


class Patient(Base):
    __tablename__ = "patient"
    id = Column(Integer, primary_key=True, autoincrement=True)  # autogenerated int
    patient = Column(String, primary_key=True)  # pattern = CRONP-0000{id} based on autogenerated id
    sex = Column(String)  # F/M
    date_of_birth = Column(String)
    biopsy = relationship("Biopsy", back_populates="patient")
    case = relationship("Case", back_populates="patient")

    def __repr__(self):
        return "<Patient {}>".format(self.patient)


class Biopsy(Base):
    __tablename__ = "biopsy"
    id = Column(String, primary_key=True)  # pattern = {patient}-{case}{T/N}{F/P}
    patient_id = Column(Integer, ForeignKey("patient.id"))
    tumor_normal = Column(String)
    sample_storage_method = Column(String)
    tumor_content = Column(Float)
    ploidy = Column(Integer)
    grade = Column(String)
    t_stage = Column(String)
    n_stage = Column(String)
    m_stage = Column(String)
    stage = Column(String)
    diagnosis_detailed = Column(String)
    dense_subtype = Column(String)
    MSI = Column(String)
    tumor_mutational_burden = Column(Float)
    patient = relationship("Patient", back_populates="biopsy")
    sequence = relationship("Sequence", back_populates="biopsy")


# association table for many-to-many relationship
sequence_case_table = Table("sequence_case", Base.metadata,
                            Column("sequence_id", ForeignKey("sequence.id"), primary_key=True),
                            Column("case_id", ForeignKey("case.id"), primary_key=True)
                            )


class Sequence(Base):
    __tablename__ = "sequence"
    id = Column(String, primary_key=True)  # pattern = {biopsy.id}-{RNA or DNA}
    biopsy_id = Column(String, ForeignKey("biopsy.id"))
    source = Column(String) # DNA or RNA
    biopsy = relationship("Biopsy", back_populates="sequence")
    case = relationship("Case", secondary=sequence_case_table, backref="sequence")


class Case(Base):
    __tablename__ = "case"
    id = Column(String, primary_key=True)  # pattern = CRONC-{patient_num}-{case_num}{T/N}
    patient_id = Column(Integer, ForeignKey("patient.id"))
    order_id = Column(String)
    patient = relationship("Patient", back_populates="case")
